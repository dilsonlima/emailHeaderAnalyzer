import re

def parse_email_header(header_text):
    """Analisa o cabe√ßalho de um e-mail e extrai informa√ß√µes importantes."""
    
    email_info = {
        "From": None,
        "To": None,
        "Subject": None,
        "Date": None,
        "Received": []
    }

    # Express√µes regulares para extrair informa√ß√µes
    patterns = {
        "From": r"^From:\s*(.+)",
        "To": r"^To:\s*(.+)",
        "Subject": r"^Subject:\s*(.+)",
        "Date": r"^Date:\s*(.+)",
        "Received": r"^Received:\s*(.+)"
    }

    for line in header_text.split("\n"):
        line = line.strip()
        for key, pattern in patterns.items():
            match = re.match(pattern, line, re.IGNORECASE)
            if match:
                if key == "Received":
                    email_info[key].append(match.group(1))  # Pode haver m√∫ltiplos "Received"
                else:
                    email_info[key] = match.group(1)
    
    return email_info

def main():
    # Caminho do arquivo contendo o cabe√ßalho do e-mail
    file_path = input("Digite o caminho do arquivo de cabe√ßalho de e-mail: ")

    try:
        with open(file_path, "r", encoding="utf-8") as file:
            header_text = file.read()
        
        email_data = parse_email_header(header_text)

        # Exibe os resultados
        print("\nüì© Informa√ß√µes do E-mail üì©")
        print(f"De: {email_data['From']}")
        print(f"Para: {email_data['To']}")
        print(f"Assunto: {email_data['Subject']}")
        print(f"Data: {email_data['Date']}")
        
        print("\nüîç Servidores pelos quais o e-mail passou:")
        for received in email_data["Received"]:
            print(f" - {received}")

    except FileNotFoundError:
        print("‚ùå Arquivo n√£o encontrado. Verifique o caminho e tente novamente.")

if __name__ == "__main__":
    main()
